Документация.

Данная программа решает задачу поиска решения системы линейных уравнений методом Гаусса с выбором главного элемента по строке.

Описание программы:

/* Описание */

Компоненты программы:
    1. main_lss_71_01.c
    2. lss_71_01.c

Функции реализованные в файле main_lss_71_01.c:
    int stringLength(char const *input)
        Описание:
            Функция принимает на вход строку и возвращает её длину.
        Аргументы:
            char const *
        Возвращаемое значение:
            unsigned int

    int validateFile(char const *filename)
        Описание:
            Функция принимает на вход путь к файлу в виде строки.
        Аргументы:
            char *
        Возвращаемое значение:
            0 - Файл по данному пути существует.
            1 - Такого файла по данному пути не существует.

    int validateParams(int argc, char **argv)
        Описание:
            Функция принимает на вход количество аргументов переданных в качестве параметра в командной строке и аргументы.
        Возвращаемое значение:
            0 - Валидация прошла успешно и параметры соответствуют условиям.
            1 - Ошибка ввода параметров. Такого флага не существует.
            2 - Ошибка ввода параметров. Данное значение возвращается, в случае, если количество строк воспринимаемых как названия файлов больше 2.

    int readInput(char const *inputFile, double** A, double** B, double** X, int *n)
        Описание:
            Функция принимает на вход название файла, указатели на матрицы и размер матрицы.
            Выделяет память для них, проверяет входные данные на корректность.
        Аргументы:
            char const *inputFile - название файла
            double** A - матрица коэффициентов при неизвестных
            double** B - вектор свободных членов
            int *n - размер матрицы
        Возвращаемое значение:
            0 - Успешно. Функция выделила память, считала нужно количество данных, проверила их на корректность и не выявила ошибок.
            1 - Ошибка. Файл пуст.
            2 - Ошибка. Размер матрицы отрицательный или равен нулю.
            3 - Ошибка. В файле недостаточно данных для решения задачи.
            4 - Ошибка. Один из коеффициентов или один из элементов вектора значений не являются числом.
                        Или размер матрицы не является целым положительным числом.
            5 - Ошибка. В файле недостаточно данных для решения задачи (вектор значений не полон).

    void writeAnswer(char const *outputFile, int n, const double* X, int result)
        Описание:
            Функция принимает на вход выходной файл, размер матрицы, указатель на решение и переменную для обозначения существования ответа.
        Аргументы:
            char const *outputFile - название выходного файла
            int n - размер матрицы
            const double* X - массив с решением задачи
            int result - параметр (1, если ответа не существует, иначе - 0)
        Возвращаемое значение:
            Нет

    void printHelp()
        Описание:
            Функция выводит в консоль справочную информацию.
        Аргументы:
            Нет
        Возвращаемое значение:
            Нет

    void printSystem(int n, const double *A, const double *B)
        Описание:
            Функция принимает на вход размеры матрицы, матрицу и столбец свободных членов и выводит их в консоль.
        Аргументы:
            int n - размер матрицы
            const double *A - матрица
            const double *B - столбец свободных членов
        Возвращаемое значение:
            Нет


Функции реализованные в файле lss_71_01.c:
    size_t lss_memsize_71_01(int n)
        Описание:
            Функция принимает на вход размер квадратной матрицы и возвращает количество памяти,
            необходимое алгоритму для решения задачи.
        Аргументы:
            Целое число - размер матрицы
        Возвращаемое значение:
            Целое неотрицательное число - необходимое количество памяти

    int lss_71_01(int n, double* A, double* B, double* X, double* cols)
        Описание:
            Реализует алгоритм поиска решения системы линейных уравнений методом Гаусса с выбором главного элемента по строке.
            Сначала, используя массив cols запоминаются исходные позиции столбцов матрицы. Элементы вектора ответов приводятся к одному значению.

            Основная часть алгоритма состоит из n - 1 полной итерации.
            На k-ой итерации алгоритм вызывает функцию maxColIdx с аргументами (n, k, A) и находит максимальный по абсолютному значению элемент k-ой строки матрицы.
            * Если getMax вернул -1, то алгоритм проверяет k-ое значение вектора свободных членов на равенство нулю.
                ** Если какой-то элемент не равен нулю, то решения не существует. Алгоритм возвращает 1.
                ** Иначе строка обменивается местами с последней ненулевой (предположительно) строкой.
            * Если getMax вернул неотрицательное число (номер столбца), который не равен k, осуществляется обмен столбцов местами с помощью функции swapCols.
            Осуществляется итерация прямого метода Гаусса, где от последующих строк поэлементно отнимается текущая строка, умноженная на "подглавный" элемент текущей строки делённый на главный элемент текущей итерации ("подглавный" элемент, это элемент из столбца, в котором находится главный элемент, находящийся в строках ниже строки главного элемента).
            Осуществляется обратный ход метода Гаусса, где на каждом этапе вычисляется значение i-го элемента решения путём подстановки уже известных коеффицентов.
            Алгоритм осуществляет итерацию по списку замен и восстанавливает ответ.
            Алгоритм возвращает 0.
        Аргументы:
            int n - размер матрицы системы
            double* A - матрица системы
            double* B - вектор свободных членов
            double* X - вектор-ответ
            double* cols - массив дополнительной памяти
        Возвращаемое значение:
            0 - Успешно. Задача решена, решение существует
            1 - Успешно. Задача решение, решения не существует


Коды возвращаемых значений:
0 - Программа решила задачу и вывела ответ
1 - Программа решила задачу и вывела, что ответа не существует
2 - Неправильный синтаксис флагов запуска: слишком много имён файлов
3 - Неправильный синтаксис флагов запуска: параметр не существует, либо флаг не задан
4 - Неправильный порядок параметров
5 - Файл с входными данными отсутствует
6 - Файл пуст
7 - Размер матрицы это не положительное целое число
8 - Недостаточно элементов в матрице или в столбце свободных членов
9 - Хотя бы один из элементов матрицы или столбца свободных членов не является действительным числом


Данному методу требуется дополнительно n*sizeof(double) памяти для хранения порядка замены столбцов. Порядок необходим для восстановления ответа.

Метод применим для всех видов матриц. Для задачи, у которой нет решения, на определенном шаге алгоритм обнаружит противоречие, а именно, что строка с нулевыми коеффициентами равна числу отличному от нуля. Для задачи с бесконечным количеством решений программа выведет одно решение. На определенном этапе алгоритм обнаружит, что оставшиеся строки обнулились, равны они соответственно все нулю, тогда он присвоит свободным переменным 0 и решит задачу для меньшего количества переменных.

Сложность метода - O(n^3). Тестирование прооводилось с помощью скрипта написанного на языке Python с использованием библиотеки numpy.

Амир Муллагалиев. М1-17.
